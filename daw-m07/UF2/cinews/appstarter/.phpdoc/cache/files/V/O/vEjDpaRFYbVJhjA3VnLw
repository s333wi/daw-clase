1706392372
waR3U4bTeM%3Ae2d1d559b301c4cb6c6a2d585bd29ab7-1c4c66c091051be9f714944120cb2388
s:3940:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjFjNGM2NmMwOTEwNTFiZTlmNzE0OTQ0MTIwY2IyMzg4IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTk6ImVycm9yX2V4Y2VwdGlvbi5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo0MDoiYXBwL1ZpZXdzL2Vycm9ycy9jbGkvZXJyb3JfZXhjZXB0aW9uLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MjAyNzoiPD9waHAKCnVzZSBDb2RlSWduaXRlclxDTElcQ0xJOwoKLy8gVGhlIG1haW4gRXhjZXB0aW9uCkNMSTo6bmV3TGluZSgpOwpDTEk6OndyaXRlKCdbJyAuIGdldF9jbGFzcygkZXhjZXB0aW9uKSAuICddJywgJ2xpZ2h0X2dyYXknLCAncmVkJyk7CkNMSTo6bmV3TGluZSgpOwpDTEk6OndyaXRlKCRtZXNzYWdlKTsKQ0xJOjpuZXdMaW5lKCk7CkNMSTo6d3JpdGUoJ2F0ICcgLiBDTEk6OmNvbG9yKGNsZWFuX3BhdGgoJGV4Y2VwdGlvbi0+Z2V0RmlsZSgpKSAuICc6JyAuICRleGNlcHRpb24tPmdldExpbmUoKSwgJ2dyZWVuJykpOwpDTEk6Om5ld0xpbmUoKTsKCi8vIFRoZSBiYWNrdHJhY2UKaWYgKGRlZmluZWQoJ1NIT1dfREVCVUdfQkFDS1RSQUNFJykgJiYgU0hPV19ERUJVR19CQUNLVFJBQ0UpIHsKICAgICRiYWNrdHJhY2VzID0gJGV4Y2VwdGlvbi0+Z2V0VHJhY2UoKTsKCiAgICBpZiAoJGJhY2t0cmFjZXMpIHsKICAgICAgICBDTEk6OndyaXRlKCdCYWNrdHJhY2U6JywgJ2dyZWVuJyk7CiAgICB9CgogICAgZm9yZWFjaCAoJGJhY2t0cmFjZXMgYXMgJGkgPT4gJGVycm9yKSB7CiAgICAgICAgJHBhZEZpbGUgID0gJyAgICAnOyAvLyA0IHNwYWNlcwogICAgICAgICRwYWRDbGFzcyA9ICcgICAgICAgJzsgLy8gNyBzcGFjZXMKICAgICAgICAkYyAgICAgICAgPSBzdHJfcGFkKCRpICsgMSwgMywgJyAnLCBTVFJfUEFEX0xFRlQpOwoKICAgICAgICBpZiAoaXNzZXQoJGVycm9yWydmaWxlJ10pKSB7CiAgICAgICAgICAgICRmaWxlcGF0aCA9IGNsZWFuX3BhdGgoJGVycm9yWydmaWxlJ10pIC4gJzonIC4gJGVycm9yWydsaW5lJ107CgogICAgICAgICAgICBDTEk6OndyaXRlKCRjIC4gJHBhZEZpbGUgLiBDTEk6OmNvbG9yKCRmaWxlcGF0aCwgJ3llbGxvdycpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBDTEk6OndyaXRlKCRjIC4gJHBhZEZpbGUgLiBDTEk6OmNvbG9yKCdbaW50ZXJuYWwgZnVuY3Rpb25dJywgJ3llbGxvdycpKTsKICAgICAgICB9CgogICAgICAgICRmdW5jdGlvbiA9ICcnOwoKICAgICAgICBpZiAoaXNzZXQoJGVycm9yWydjbGFzcyddKSkgewogICAgICAgICAgICAkdHlwZSA9ICgkZXJyb3JbJ3R5cGUnXSA9PT0gJy0+JykgPyAnKCknIC4gJGVycm9yWyd0eXBlJ10gOiAkZXJyb3JbJ3R5cGUnXTsKICAgICAgICAgICAgJGZ1bmN0aW9uIC49ICRwYWRDbGFzcyAuICRlcnJvclsnY2xhc3MnXSAuICR0eXBlIC4gJGVycm9yWydmdW5jdGlvbiddOwogICAgICAgIH0gZWxzZWlmICghIGlzc2V0KCRlcnJvclsnY2xhc3MnXSkgJiYgaXNzZXQoJGVycm9yWydmdW5jdGlvbiddKSkgewogICAgICAgICAgICAkZnVuY3Rpb24gLj0gJHBhZENsYXNzIC4gJGVycm9yWydmdW5jdGlvbiddOwogICAgICAgIH0KCiAgICAgICAgJGFyZ3MgPSBpbXBsb2RlKCcsICcsIGFycmF5X21hcChzdGF0aWMgZnVuY3Rpb24gKCR2YWx1ZSkgewogICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHsKICAgICAgICAgICAgICAgIGNhc2UgaXNfb2JqZWN0KCR2YWx1ZSk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPYmplY3QoJyAuIGdldF9jbGFzcygkdmFsdWUpIC4gJyknOwoKICAgICAgICAgICAgICAgIGNhc2UgaXNfYXJyYXkoJHZhbHVlKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY291bnQoJHZhbHVlKSA/ICdbLi4uXScgOiAnW10nOwoKICAgICAgICAgICAgICAgIGNhc2UgJHZhbHVlID09PSBudWxsOgogICAgICAgICAgICAgICAgICAgIHJldHVybiAnbnVsbCc7IC8vIHJldHVybiB0aGUgbG93ZXJjYXNlZCB2ZXJzaW9uCgogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFyX2V4cG9ydCgkdmFsdWUsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgfSwgYXJyYXlfdmFsdWVzKCRlcnJvclsnYXJncyddID8/IFtdKSkpOwoKICAgICAgICAkZnVuY3Rpb24gLj0gJygnIC4gJGFyZ3MgLiAnKSc7CgogICAgICAgIENMSTo6d3JpdGUoJGZ1bmN0aW9uKTsKICAgICAgICBDTEk6Om5ld0xpbmUoKTsKICAgIH0KfQoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";