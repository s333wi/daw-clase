1706392373
waR3U4bTeM%3A97614bc45a952f1cdb6cc6072ee50f5b-0198feea41ef0cdcba80180a0064ec8f
s:3980:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjAxOThmZWVhNDFlZjBjZGNiYTgwMTgwYTAwNjRlYzhmIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTM6ImVycm9yXzQwNC5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo2NToidmVuZG9yL2NvZGVpZ25pdGVyNC9mcmFtZXdvcmsvYXBwL1ZpZXdzL2Vycm9ycy9odG1sL2Vycm9yXzQwNC5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjIwMzg6IjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiI+CjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPHRpdGxlPjw/PSBsYW5nKCdFcnJvcnMucGFnZU5vdEZvdW5kJykgPz48L3RpdGxlPgoKICAgIDxzdHlsZT4KICAgICAgICBkaXYubG9nbyB7CiAgICAgICAgICAgIGhlaWdodDogMjAwcHg7CiAgICAgICAgICAgIHdpZHRoOiAxNTVweDsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICBvcGFjaXR5OiAwLjA4OwogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgICAgIHRvcDogMnJlbTsKICAgICAgICAgICAgbGVmdDogNTAlOwogICAgICAgICAgICBtYXJnaW4tbGVmdDogLTczcHg7CiAgICAgICAgfQogICAgICAgIGJvZHkgewogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmYWZhZmE7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAiSGVsdmV0aWNhIE5ldWUiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwogICAgICAgICAgICBjb2xvcjogIzc3NzsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDMwMDsKICAgICAgICB9CiAgICAgICAgaDEgewogICAgICAgICAgICBmb250LXdlaWdodDogbGlnaHRlcjsKICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDsKICAgICAgICAgICAgZm9udC1zaXplOiAzcmVtOwogICAgICAgICAgICBtYXJnaW4tdG9wOiAwOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwOwogICAgICAgICAgICBjb2xvcjogIzIyMjsKICAgICAgICB9CiAgICAgICAgLndyYXAgewogICAgICAgICAgICBtYXgtd2lkdGg6IDEwMjRweDsKICAgICAgICAgICAgbWFyZ2luOiA1cmVtIGF1dG87CiAgICAgICAgICAgIHBhZGRpbmc6IDJyZW07CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2VmZWZlZjsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMC41cmVtOwogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgfQogICAgICAgIHByZSB7CiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IDEuNXJlbTsKICAgICAgICB9CiAgICAgICAgY29kZSB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmYWZhZmE7CiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNlZmVmZWY7CiAgICAgICAgICAgIHBhZGRpbmc6IDAuNXJlbSAxcmVtOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgIH0KICAgICAgICBwIHsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMS41cmVtOwogICAgICAgIH0KICAgICAgICAuZm9vdGVyIHsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMnJlbTsKICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlZmVmZWY7CiAgICAgICAgICAgIHBhZGRpbmc6IDFlbSAyZW0gMCAyZW07CiAgICAgICAgICAgIGZvbnQtc2l6ZTogODUlOwogICAgICAgICAgICBjb2xvcjogIzk5OTsKICAgICAgICB9CiAgICAgICAgYTphY3RpdmUsCiAgICAgICAgYTpsaW5rLAogICAgICAgIGE6dmlzaXRlZCB7CiAgICAgICAgICAgIGNvbG9yOiAjZGQ0ODE0OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KPGJvZHk+CiAgICA8ZGl2IGNsYXNzPSJ3cmFwIj4KICAgICAgICA8aDE+NDA0PC9oMT4KCiAgICAgICAgPHA+CiAgICAgICAgICAgIDw/cGhwIGlmIChFTlZJUk9OTUVOVCAhPT0gJ3Byb2R1Y3Rpb24nKSA6ID8+CiAgICAgICAgICAgICAgICA8Pz0gbmwyYnIoZXNjKCRtZXNzYWdlKSkgPz4KICAgICAgICAgICAgPD9waHAgZWxzZSA6ID8+CiAgICAgICAgICAgICAgICA8Pz0gbGFuZygnRXJyb3JzLnNvcnJ5Q2Fubm90RmluZCcpID8+CiAgICAgICAgICAgIDw/cGhwIGVuZGlmID8+CiAgICAgICAgPC9wPgogICAgPC9kaXY+CjwvYm9keT4KPC9odG1sPgoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fXM6NDA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZW51bXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";